Grammar
start = pattern
pattern = (element {http://relaxng.org/ns/structure/1.0}element {
((nameQName | nameClass), (common & (pattern, pattern*)))
}
 | element {http://relaxng.org/ns/structure/1.0}attribute {
((nameQName | nameClass), (common & pattern?))
}
 | element ({http://relaxng.org/ns/structure/1.0}group | {http://relaxng.org/ns/structure/1.0}interleave | {http://relaxng.org/ns/structure/1.0}choice | {http://relaxng.org/ns/structure/1.0}optional | {http://relaxng.org/ns/structure/1.0}zeroOrMore | {http://relaxng.org/ns/structure/1.0}oneOrMore | {http://relaxng.org/ns/structure/1.0}list | {http://relaxng.org/ns/structure/1.0}mixed) {
(common & (pattern, pattern*))
}
 | element ({http://relaxng.org/ns/structure/1.0}ref | {http://relaxng.org/ns/structure/1.0}parentRef) {
(nameNCName, common)
}
 | element ({http://relaxng.org/ns/structure/1.0}empty | {http://relaxng.org/ns/structure/1.0}notAllowed | {http://relaxng.org/ns/structure/1.0}text) {
common
}
 | element {http://relaxng.org/ns/structure/1.0}data {
(type, param*, (common & exceptPattern?))
}
 | element {http://relaxng.org/ns/structure/1.0}value {
(commonAttributes, type?, xsd:string)
}
 | element {http://relaxng.org/ns/structure/1.0}externalRef {
(href, common)
}
 | element {http://relaxng.org/ns/structure/1.0}grammar {
(common & grammarContent*)
}
)
param = element {http://relaxng.org/ns/structure/1.0}param {
(commonAttributes, nameNCName, xsd:string)
}

exceptPattern = element {http://relaxng.org/ns/structure/1.0}except {
(common & (pattern, pattern*))
}

grammarContent = (definition | element {http://relaxng.org/ns/structure/1.0}div {
(common & grammarContent*)
}
 | element {http://relaxng.org/ns/structure/1.0}include {
(href, (common & includeContent*))
}
)
includeContent = (definition | element {http://relaxng.org/ns/structure/1.0}div {
(common & includeContent*)
}
)
definition = (element {http://relaxng.org/ns/structure/1.0}start {
(combine?, (common & (pattern, pattern*)))
}
 | element {http://relaxng.org/ns/structure/1.0}define {
(nameNCName, combine?, (common & (pattern, pattern*)))
}
)
combine = attribute {http://relaxng.org/ns/structure/1.0}combine { ("choice" | "interleave") }
nameClass = (element {http://relaxng.org/ns/structure/1.0}name {
(commonAttributes, xsd:QName)
}
 | element {http://relaxng.org/ns/structure/1.0}anyName {
(common & exceptNameClass?)
}
 | element {http://relaxng.org/ns/structure/1.0}nsName {
(common & exceptNameClass?)
}
 | element {http://relaxng.org/ns/structure/1.0}choice {
(common & (nameClass, nameClass*))
}
)
exceptNameClass = element {http://relaxng.org/ns/structure/1.0}except {
(common & (nameClass, nameClass*))
}

nameQName = attribute {http://relaxng.org/ns/structure/1.0}name { xsd:QName }
nameNCName = attribute {http://relaxng.org/ns/structure/1.0}name { xsd:NCName }
href = attribute {http://relaxng.org/ns/structure/1.0}href { xsd:anyURI }
type = attribute {http://relaxng.org/ns/structure/1.0}type { xsd:NCName }
common = (commonAttributes, foreignElement*)
commonAttributes = (attribute {http://relaxng.org/ns/structure/1.0}ns { xsd:string }?, attribute {http://relaxng.org/ns/structure/1.0}datatypeLibrary { xsd:anyURI }?, foreignAttribute*)
foreignElement = element (* - {http://relaxng.org/ns/structure/1.0}*) {
(anyAttribute | text | anyElement)*
}

foreignAttribute = attribute (* - ({http://relaxng.org/ns/structure/1.0}* | {}*)) { text }
anyElement = element * {
(anyAttribute | text | anyElement)*
}

anyAttribute = attribute * { text }


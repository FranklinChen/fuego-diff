Fuego Core Micro Edition (FCME)

Parts of the Fuego Core Service Set are runnable on a Java 2 Micro
Edition platform, specifically on the Mobile Information Device
Profile (MIDP).  Placement and compilation of classes suitable for the
FCME package is specified here and must be observed by new additions.

First of all, any classes applicable only to the MIDP platform are
placed under the fcme root package with similar hierarchy to the main
fuegocore root package.  This includes MIDlets etc. that require the
MIDP libraries to compile or run, but it also includes classes with
similar purpose as some main fuegocore classes but restricted
functionality.

Any resources that the MIDP implementation needs to find are placed in
the src/me-res directory, from which they are copied to the FCME
package.

For compiling the FCME package there are special rules in the Ant
build file.  These rules require the setting of the property wtk.home
to the directory where the J2ME Wireless Toolkit lives.  By default
this is set to /opt/java/WTK2.1, but it may be changed by running Ant
with the option -Dwtk.home=<actual path>.

The new rule 'me' will compile the classes, obfuscate and preverify
them, and build a JAR file.  From the manifest of the JAR file the
rule generates the application descriptor file needed by the WTK
emulator.

The obfuscator to use can be selected dynamically by setting the
property me.obfuscator.  At the moment (note that this may be obsolete
if people don't keep file and doc in sync) the default obfuscator is
named 'null' and doesn't do anything.  Another option is to use
ProGuard by setting this property to value 'proguard'.

The rule 'me-run' will run the emulator with the application
descriptor generated by the rule 'me' or by hand.  What happens then
should be pretty self-explanatory.

New MIDlets should be added to the appropriate subpackage beneath the
fcme.examples package.  The name and classname (and possibly an image
name; remember to place the image in the resource directory in this
case) are added to the file src/fcme.mf following the example of the
existing MIDlet lines there.  They also need to be added to the me
build target in the build.xml file, again following the example of
existing ones.

By default all classes under the fcme package are compiled into the
FCME package (except for the tests subpackage; see below).  Any
classes under the fuegocore package that are used by one of these
classes must be added to the file src/me-sources (by source file name;
follow the existing ones).  Wildcards can be used in that file.  In
case a wildcarded name catches more than it should, source files to
exclude may be added to the file src/me-non-sources.

If the FCME classes use any external libraries from the contrib
directory, place these as an '-injars' argument into the
'me-obfuscate' rule following the example of the kxml2.jar file
already there.  This ensures that only classes actually used by FCME
from these libraries are shipped with the JAR file.

When a FCME class is a stripped-down version of a normal class, it may
still need to interoperate with the normal class.  To this end there
is a package fcme.tests, under which are JUnit tests that are allowed
to depend on both the normal and FCME libraries.  The tests are
written as normally and added to the fcme.tests.MeSuite test suite.
The build rule 'me-test' runs these tests.  Note that MIDP classes are
not available during this test, so only classes that do not depend on
MIDP can be tested like this.
